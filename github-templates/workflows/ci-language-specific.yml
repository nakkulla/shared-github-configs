name: 🚀 Language-Specific CI

# 프로젝트 언어별 특화 CI 워크플로우
# 각 언어별 최적화된 빌드/테스트 파이프라인

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]
  workflow_dispatch:

jobs:
  # 프로젝트 유형 감지
  detect-project-type:
    runs-on: ubuntu-latest
    outputs:
      is-node: ${{ steps.detect.outputs.is-node }}
      is-python: ${{ steps.detect.outputs.is-python }}
      is-go: ${{ steps.detect.outputs.is-go }}
      is-rust: ${{ steps.detect.outputs.is-rust }}
      is-java: ${{ steps.detect.outputs.is-java }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Detect project type
        id: detect
        run: |
          echo "is-node=$([ -f 'package.json' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "is-python=$([ -f 'requirements.txt' -o -f 'pyproject.toml' -o -f 'setup.py' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "is-go=$([ -f 'go.mod' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "is-rust=$([ -f 'Cargo.toml' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "is-java=$([ -f 'pom.xml' -o -f 'build.gradle' -o -f 'build.gradle.kts' ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

  # Node.js 프로젝트 CI
  nodejs-ci:
    needs: detect-project-type
    if: needs.detect-project-type.outputs.is-node == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    name: 🟢 Node.js ${{ matrix.node-version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint
        run: npm run lint --if-present

      - name: 🏗️ Build
        run: npm run build --if-present

      - name: 🧪 Test
        run: npm test --if-present

      - name: 📊 Coverage
        run: npm run coverage --if-present

  # Python 프로젝트 CI
  python-ci:
    needs: detect-project-type
    if: needs.detect-project-type.outputs.is-python == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    name: 🐍 Python ${{ matrix.python-version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .; fi

      - name: 🔍 Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🧪 Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=xml || echo "No tests found"

  # Go 프로젝트 CI
  go-ci:
    needs: detect-project-type
    if: needs.detect-project-type.outputs.is-go == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.20', '1.21', '1.22']
    name: 🔷 Go ${{ matrix.go-version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔷 Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: 📦 Download dependencies
        run: go mod download

      - name: 🔍 Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      - name: 🏗️ Build
        run: go build -v ./...

      - name: 🧪 Test
        run: go test -v -race -coverprofile=coverage.out ./...

  # Rust 프로젝트 CI
  rust-ci:
    needs: detect-project-type
    if: needs.detect-project-type.outputs.is-rust == 'true'
    runs-on: ubuntu-latest
    name: 🦀 Rust
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 📦 Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 🔍 Format check
        run: cargo fmt --all -- --check

      - name: 🔍 Clippy
        run: cargo clippy -- -D warnings

      - name: 🏗️ Build
        run: cargo build --verbose

      - name: 🧪 Test
        run: cargo test --verbose

  # Java 프로젝트 CI
  java-ci:
    needs: detect-project-type
    if: needs.detect-project-type.outputs.is-java == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [11, 17, 21]
    name: ☕ Java ${{ matrix.java-version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'

      # Maven 프로젝트
      - name: 🔧 Maven build and test
        if: hashFiles('pom.xml') != ''
        run: |
          ./mvnw clean compile test

      # Gradle 프로젝트
      - name: 🔧 Gradle build and test
        if: hashFiles('build.gradle', 'build.gradle.kts') != ''
        run: |
          ./gradlew build test
